{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "FundooNotes",
    "description": "My User Project Application API"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "User",
      "description": "API for users in the system"
    },
    {
      "name": "Note",
      "description": "API for Notes in the system"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "register a new User",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "User",
            "description": "user object that needs to be register",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRegistration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "verification link has been sent successfully to activate the account"
          },
          "400": {
            "description": "Bad Request ,Invalid input"
          }
        }
      }
    },
    "/activateEmail": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "activate the account",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "User",
            "description": "send mail to user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user registered successfully"
          },
          "400": {
            "description": "Bad Request ,Invalid input"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Login registered User",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "User",
            "description": "user object that needs to be login",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user registered successfully"
          },
          "400": {
            "description": "Bad Request ,Invalid input"
          }
        }
      }
    },
    "/forgotPassword": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "generate and send reset Password Link to User's email id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "User",
            "description": "send mail to user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user registered successfully"
          },
          "400": {
            "description": "Bad Request ,Invalid input"
          }
        }
      }
    },
    "/resetPassword": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "update password",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ResetPassword",
            "description": "new password that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "password updated with input id"
          },
          "404": {
            "description": "user not found with input id"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/addNote": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Add a new note",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Note",
            "description": "Note object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " Note inserted successfully"
          },
          "400": {
            "description": "Bad Request ,Invalid input"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/allNotes": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "get all Notes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "retirved successfully"
          },
          "500": {
            "description": "internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/uniqueNote/{noteId}": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "get specific note by noteId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "note retrieved successfully"
          },
          "404": {
            "description": "note not found with input id"
          }
        }
      }
    },
    "/updateNote/{noteId}": {
      "put": {
        "tags": [
          "Note"
        ],
        "summary": "update exiting note",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "type": "string",
            "description": "id that need to be updated successfully",
            "required": true
          },
          {
            "in": "body",
            "name": "Note",
            "description": "note object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "note updated with input id"
          },
          "404": {
            "description": "note  not found with input id"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/note/{noteId}": {
      "delete": {
        "tags": [
          "Note"
        ],
        "summary": "delete note ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "description": "id for Note that need to be deleted",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "note deleted successfully with input id"
          },
          "404": {
            "description": "note  not found with input id"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/addLabelToNote": {
      "put": {
        "tags": [
          "Note"
        ],
        "summary": "update existing note",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Note",
            "description": "note objectId and label ObjecId that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateNoteByLabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "note updated with input id"
          },
          "404": {
            "description": "note not found with input id"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/addUserToNote": {
      "put": {
        "tags": [
          "Note"
        ],
        "summary": "update existing note",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Note",
            "description": "note objectId and user ObjecId that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateNoteByUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "note updated with input id"
          },
          "404": {
            "description": "note not found with input id"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/deleteLabelFromNote": {
      "put": {
        "tags": [
          "Note"
        ],
        "summary": "update existing note",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Note",
            "description": "note objectId and label ObjecId that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateNoteByLabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "note updated with input id"
          },
          "404": {
            "description": "note not found with input id"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/deleteUserFromNote": {
      "put": {
        "tags": [
          "Note"
        ],
        "summary": "update existing note",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Note",
            "description": "note objectId and user ObjecId that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateNoteByUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "note updated with input id"
          },
          "404": {
            "description": "note not found with input id"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/labels": {
      "get": {
        "tags": [
          "Label"
        ],
        "summary": "get all Labels",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "retirved successfully"
          },
          "500": {
            "description": "internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/addlabel": {
      "post": {
        "tags": [
          "Label"
        ],
        "summary": "Add a new Label",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Label",
            "description": "Label object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " Label inserted successfully"
          },
          "400": {
            "description": "Bad Request ,Invalid input"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/updateLabel/{labelId}": {
      "put": {
        "tags": [
          "Label"
        ],
        "summary": "update exiting Label ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "labelId",
            "type": "string",
            "description": "id that need to be updated successfully",
            "required": true
          },
          {
            "in": "body",
            "name": "Note",
            "description": "label object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "note updated with input id"
          },
          "404": {
            "description": "note  not found with input id"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    },
    "/label/{labelId}": {
      "delete": {
        "tags": [
          "Label"
        ],
        "summary": "delete lavel ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "labelId",
            "description": "id for label that need to be deleted",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "note deleted successfully with input id"
          },
          "404": {
            "description": "note  not found with input id"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "deprecated": false
      }
    }
  },
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "UserRegistration": {
      "type": "object",
      "required": [
        "name",
        "email",
        "password",
        "confirmPassword"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Aakash"
        },
        "email": {
          "type": "string",
          "example": "aakashrajak2809@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "Pattern@35"
        },
        "confirmPassword": {
          "type": "string",
          "example": "Pattern@35"
        }
      }
    },
    "UserLogin": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "aakashrajak2809@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "Pattern@35"
        }
      }
    },
    "ForgotPassword": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "aakashrajak2809@gmail.com"
        }
      }
    },
    "ResetPassword": {
      "type": "object",
      "required": [
        "email",
        "newPassword"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "aakashrajak2809@gmail.com"
        },
        "newPassword": {
          "type": "string",
          "example": "Pattern@35"
        }
      }
    },
    "Note": {
      "type": "object",
      "required": [
        "title",
        "note"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "Expenses"
        },
        "note": {
          "type": "string",
          "example": "Rent- 8000"
        }
      }
    },
    "updateNoteByLabel": {
      "type": "object",
      "required": [
        "noteId",
        "labelId"
      ],
      "properties": {
        "noteId": {
          "type": "string",
          "example": ""
        },
        "labelId": {
          "type": "string",
          "example": ""
        }
      }
    },
    "updateNoteByUser": {
      "type": "object",
      "required": [
        "noteId",
        "userId"
      ],
      "properties": {
        "noteId": {
          "type": "string",
          "example": ""
        },
        "userId": {
          "type": "string",
          "example": ""
        }
      }
    },
    "Label": {
      "type": "object",
      "required": [
        "label"
      ],
      "properties": {
        "label": {
          "type": "string",
          "example": "Aakash"
        }
      }
    }
  }
}